enum Состояние_парикмахера {Свободен, Занят}

type Парикмахерские {
	Состояние_парикмахера состояние_парикмахера;
	int количество_в_очереди;
	int количество_обслуженных;
}

resource парикмахерская = Парикмахерские.create(Состояние_парикмахера.Свободен, 0, 0);

event Событие_прихода_клиента() {
	Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
	парикмахерская.количество_в_очереди =  парикмахерская.количество_в_очереди + 1;
}

operation Образец_обслуживания_клиента() {
	relevant _Парикмахерская = парикмахерская.onlyif[состояние_парикмахера == Состояние_парикмахера.Свободен
			&& количество_в_очереди > 0];

	set duration() {
		return длительность_обслуживания.next();
	}
	set begin() {
		_Парикмахерская.количество_в_очереди = _Парикмахерская.количество_в_очереди - 1;
		_Парикмахерская.состояние_парикмахера = Состояние_парикмахера.Занят;
	}
	set end() {
		_Парикмахерская.состояние_парикмахера = Состояние_парикмахера.Свободен;
		_Парикмахерская.количество_обслуженных =  _Парикмахерская.количество_обслуженных + 1;
	}
}

logic Model {
	activity обслуживание_клиента = new Activity(Образец_обслуживания_клиента.create());
}

sequence интервал_прихода = new Exponential(123456789, 1/30.0);
sequence длительность_обслуживания = new Uniform(123456789, 20, 40);

set init() {
	Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
}

set terminateCondition() {
	return currentTime >= 7 * 12 * 60;
}

resultType Занятость_парикмахера<Состояние_парикмахера>() {
	set evaluate() {
		return парикмахерская.состояние_парикмахера
	}
}

result занятость_парикмахера = new Занятость_парикмахера();
result длина_очереди = Result.create(Integer, [парикмахерская.количество_в_очереди]);
result Всего_обслужено = Result.create(Integer, [парикмахерская.количество_обслуженных]);
result Пропускная_способность = Result.create(Double, [парикмахерская.количество_обслуженных / currentTime * 60]);
result Длительность_работы = Result.create(Double, [currentTime / 60]);
