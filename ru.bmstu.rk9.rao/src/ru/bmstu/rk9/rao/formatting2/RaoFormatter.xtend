/*
 * generated by Xtext
 */
package ru.bmstu.rk9.rao.formatting2;

import com.google.inject.Inject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter;
import ru.bmstu.rk9.rao.rao.Constant;
import ru.bmstu.rk9.rao.rao.DecisionPointActivity;
import ru.bmstu.rk9.rao.rao.DecisionPointSearch;
import ru.bmstu.rk9.rao.rao.DecisionPointSearchActivity;
import ru.bmstu.rk9.rao.rao.DecisionPointSome;
import ru.bmstu.rk9.rao.rao.DefaultMethod;
import ru.bmstu.rk9.rao.rao.DptEvaluateByStatement;
import ru.bmstu.rk9.rao.rao.DptSearchStatemets;
import ru.bmstu.rk9.rao.rao.DptSetConditionStatement;
import ru.bmstu.rk9.rao.rao.DptSetPriorityStatement;
import ru.bmstu.rk9.rao.rao.DptSetTerminateConditionStatement;
import ru.bmstu.rk9.rao.rao.DptStatements;
import ru.bmstu.rk9.rao.rao.Event;
import ru.bmstu.rk9.rao.rao.FieldDeclaration;
import ru.bmstu.rk9.rao.rao.Frame;
import ru.bmstu.rk9.rao.rao.FunctionDeclaration;
import ru.bmstu.rk9.rao.rao.Pattern;
import ru.bmstu.rk9.rao.rao.PatternSelectLogic;
import ru.bmstu.rk9.rao.rao.PatternSelectMethod;
import ru.bmstu.rk9.rao.rao.RaoEntity;
import ru.bmstu.rk9.rao.rao.RaoModel;
import ru.bmstu.rk9.rao.rao.RelevantResource;
import ru.bmstu.rk9.rao.rao.ResourceDeclaration;
import ru.bmstu.rk9.rao.rao.ResourceType;
import ru.bmstu.rk9.rao.rao.Result;
import ru.bmstu.rk9.rao.rao.ResultGetValue;
import ru.bmstu.rk9.rao.rao.ResultWatchParameter;
import ru.bmstu.rk9.rao.rao.ResultWatchQuantity;
import ru.bmstu.rk9.rao.rao.ResultWatchState;
import ru.bmstu.rk9.rao.rao.ResultWatchValue;
import ru.bmstu.rk9.rao.rao.Sequence;
import ru.bmstu.rk9.rao.services.RaoGrammarAccess;

class RaoFormatter extends XbaseFormatter {
	@Inject extension RaoGrammarAccess

	def dispatch void format(RaoModel raomodel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (RaoEntity objects : raomodel.getObjects()) {
			format(objects, document);
		}
	}

	def dispatch void format(ResourceType resourcetype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (FieldDeclaration parameters : resourcetype.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(FieldDeclaration fielddeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(fielddeclaration.getDeclaration(), document);
		format(fielddeclaration.getDefault(), document);
	}

	def dispatch void format(ResourceDeclaration resourcedeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(resourcedeclaration.getConstructor(), document);
	}

	def dispatch void format(Event event, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (JvmFormalParameter parameters : event.getParameters()) {
			format(parameters, document);
		}
		format(event.getBody(), document);
	}

	def dispatch void format(Pattern pattern, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (JvmFormalParameter parameters : pattern.getParameters()) {
			format(parameters, document);
		}
		for (RelevantResource relevantResources : pattern.getRelevantResources()) {
			format(relevantResources, document);
		}
		format(pattern.getCombinational(), document);
		for (DefaultMethod defaultMethods : pattern.getDefaultMethods()) {
			format(defaultMethods, document);
		}
	}

	def dispatch void format(RelevantResource relevantresource, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(relevantresource.getSelect(), document);
		format(relevantresource.getSelectMethod(), document);
	}

	def dispatch void format(PatternSelectLogic patternselectlogic, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(patternselectlogic.getLogic(), document);
	}

	def dispatch void format(PatternSelectMethod patternselectmethod, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(patternselectmethod.getExpression(), document);
	}

	def dispatch void format(DecisionPointSome decisionpointsome, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (DptStatements initStatements : decisionpointsome.getInitStatements()) {
			format(initStatements, document);
		}
		for (DecisionPointActivity activities : decisionpointsome.getActivities()) {
			format(activities, document);
		}
	}

	def dispatch void format(DecisionPointActivity decisionpointactivity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(decisionpointactivity.getPriority(), document);
		for (XExpression parameters : decisionpointactivity.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(DecisionPointSearch decisionpointsearch, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (DptSearchStatemets initStatements : decisionpointsearch.getInitStatements()) {
			format(initStatements, document);
		}
		for (DecisionPointSearchActivity activities : decisionpointsearch.getActivities()) {
			format(activities, document);
		}
	}

	def dispatch void format(DecisionPointSearchActivity decisionpointsearchactivity,
		extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (XExpression parameters : decisionpointsearchactivity.getParameters()) {
			format(parameters, document);
		}
		format(decisionpointsearchactivity.getValueBefore(), document);
		format(decisionpointsearchactivity.getValueAfter(), document);
	}

	def dispatch void format(DptSetConditionStatement dptsetconditionstatement,
		extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(dptsetconditionstatement.getCondition(), document);
	}

	def dispatch void format(DptSetPriorityStatement dptsetprioritystatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(dptsetprioritystatement.getPriority(), document);
	}

	def dispatch void format(DptSetTerminateConditionStatement dptsetterminateconditionstatement,
		extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(dptsetterminateconditionstatement.getTermination(), document);
	}

	def dispatch void format(DptEvaluateByStatement dptevaluatebystatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(dptevaluatebystatement.getEvaluateBy(), document);
	}

	def dispatch void format(Sequence sequence, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(sequence.getConstructor(), document);
	}

	def dispatch void format(Constant constant, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(constant.getConstant(), document);
		format(constant.getValue(), document);
	}

	def dispatch void format(FunctionDeclaration functiondeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(functiondeclaration.getType(), document);
		for (JvmFormalParameter parameters : functiondeclaration.getParameters()) {
			format(parameters, document);
		}
		format(functiondeclaration.getBody(), document);
	}

	def dispatch void format(Result result, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(result.getType(), document);
	}

	def dispatch void format(ResultWatchParameter resultwatchparameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(resultwatchparameter.getParameter(), document);
	}

	def dispatch void format(ResultWatchState resultwatchstate, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(resultwatchstate.getLogic(), document);
	}

	def dispatch void format(ResultWatchQuantity resultwatchquantity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(resultwatchquantity.getLogic(), document);
	}

	def dispatch void format(ResultWatchValue resultwatchvalue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(resultwatchvalue.getLogic(), document);
		format(resultwatchvalue.getExpression(), document);
	}

	def dispatch void format(ResultGetValue resultgetvalue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(resultgetvalue.getExpression(), document);
	}

	def dispatch void format(Frame frame, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(frame.getBody(), document);
	}

	def dispatch void format(DefaultMethod defaultmethod, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		format(defaultmethod.getBody(), document);
	}
}
